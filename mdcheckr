#!/bin/bash
# mdcheckr: practical CI testing for markdown files
# Copyright (c) 2017 Michael Billington < michael.billington@gmail.com >
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Set bash options
set -o errexit
set -o pipefail
set -o nounset

function temporary_file() {
  if [[ $(uname -s) == 'Darwin' ]]; then
    echo $($TMPDIR$(uuidgen))
  else
    echo $($tempfile)
  fi
}

function render_markdown_to_html() {
  # Render markdown to temp file via Pandoc for further processing
  local _outp_file=$(mktemp $(temporary_file))
  pandoc -f gfm -- "$1" > "$_outp_file"
  echo "$_outp_file"
}

function extract_links_from_html() {
  # Extract URLs from HTML file:
  # - Extract URI via <a href=""></a> attribute
  # - Format as one URI per line
  local _inp_file="$1"
  (xmllint --nowarning --html --xpath '*//a/@href' "$_inp_file" 2> /dev/null || true) | \
    sed 's/ href="\([^"]*\)"/\1\n/g' | grep -v "^#"
}

function extract_image_links_from_html() {
  # Extract URLs from HTML file:
  # - Extract URI via <img src=""></a> attribute
  # - Format as one URI per line
  local _inp_file="$1"
  (xmllint --nowarning --html --xpath '*//img/@src' "$_inp_file" 2> /dev/null || true) | \
    sed 's/ src="\([^"]*\)"/\1\n/g'
}

function check_links() {
  # Take a list of relative and absolute paths as input and verify that they are
  # all accessible.
  local _inp_file="$1"
  while read -r _line; do
    # Notify of check
    echo -n "- Link $_line ";
    if ! check_link "$_line"; then
      red "FAIL"
      explain "$_inp_file" 1 "Broken link '$_line'"
      FAILURE_COUNT=$((FAILURE_COUNT+1))
    else
      green "OK"
    fi
  done
}

function check_image_links() {
  # Take a list of relative and absolute paths on STDIN and verify that they are
  # all accessible.
  local _inp_file="$1"
  while read -r _line; do
    # Notify of check
    echo -n "- Image $_line ";
    if ! check_link "$_line"; then
      red "FAIL"
      explain "$_inp_file" 1 "Broken image '$_line'"
      FAILURE_COUNT=$((FAILURE_COUNT+1))
    else
      green "OK"
    fi
  done
}

function check_link() {
  # Argument: A URI to check
  local _inp_filename="$1"
  if [ -f "$_inp_filename" ]; then
    return 0
  fi
  if curl --silent --head --location --fail -H "Accept: text/html" -- "$_inp_filename" > /dev/null; then
    return 0
  fi
  return 1
}

function check_code_blocks() {
  # Extract code blocks from markdown file, and check each one
  local _input_markdown_file="$1";
  local _line_number="0"
  local _is_code="0"
  local _code_block_start_line="0"
  local _code_block_language=""
  local _code_block_file=""
  while read -r _line; do
    _line_number=$((_line_number+1))
    if [[ "$_line" =~ ^\`\`\`.* ]]; then
      # Found a line with three backticks
      if [[ "$_is_code" == "1" ]]; then
        _is_code="0"
        check_code_block "$_input_markdown_file" "$_code_block_start_line" "$_code_block_file" "$_code_block_language"
      else
        _code_block_language=$(echo "$_line" | sed 's/^[` ]*//;s/[ ]*$//')
        _code_block_file=$(mktemp $(temporary_file))
        _code_block_start_line="$_line_number"
        _is_code="1"
      fi
    else
      # Other lines in the file
      if [[ "$_is_code" == "1" ]]; then
        # Write lines inside code blocks out to file
        echo "$_line" >> "$_code_block_file"
      fi
    fi
  done < "$_input_markdown_file"
  if [[ "$_is_code" == "1" ]]; then
    explain "$_input_markdown_file" "$_line_number" "Code block not terminated"
    FAILURE_COUNT=$((FAILURE_COUNT+1))
    check_code_block "$_input_markdown_file" "$_code_block_start_line" "$_code_block_file" "$_code_block_language"
  fi
}

function check_code_block() {
  # Verify syntax of extracted code block
  local _input_file="$1"
  local _code_block_line="$2"
  local _code_block_tmp_file="$3"
  local _code_block_language="$4"
  if [[ "$_code_block_language" == "" ]]; then
    # Label unlabelled blocks as 'plain', to avoid confusing output
    _code_block_language="plain"
  fi
  # Pick the best tester for the code
  local _test=""
  case "$_code_block_language" in
  bash)
      _test="check_code_block_bash"
      ;;
  php)
      _test="check_code_block_php"
      ;;
  esac

  # Run actual testing
  _test_outp_file=$(mktemp $(temporary_file))
  echo -n "- Code block starting line $_code_block_line (language: $_code_block_language) "
  if [[ $_test == "" ]]; then
    # Skip out of blocks we can't test
    yellow SKIP
  elif ! ${_test}_dependencies > /dev/null 2> /dev/null; then
    # Skip out of blocks if we don't have a suitable interpreter.
    yellow SKIP
    explain "$_input_file" "$_code_block_line" "You need to install a suitable interpreter for '$_code_block_language' code before mdcheckr can attempt to validate this code."
  elif $_test "$_code_block_tmp_file" > /dev/null 2> "$_test_outp_file"; then
    green OK
  else
    red FAIL
    explain "$_input_file" "$_code_block_line" "$_code_block_language code block appears to contain a syntax error."
    FAILURE_COUNT=$((FAILURE_COUNT+1))
    if [[ "$VERBOSITY" -gt 1 ]]; then
      # Output to help debug syntax errors in code blocks
      >&2 cat "$_test_outp_file"
      >&2 echo "The code block tested was:"
      >&2 cat "$_code_block_tmp_file"
    fi
  fi
  rm -f -- "$_test_outp_file"
  rm -f -- "$_code_block_tmp_file"
}

function check_code_block_bash() {
  bash -n "$1"
}

function check_code_block_bash_dependencies() {
  # Safe to assume we have bash
  true
}

function check_code_block_php() {
  local _test_file="$1"
  # Prepend the file with "<?php" if it's not in there
  grep '<?php' "$_test_file" || sed -i '1s/^/<?php\n/' -- "$_test_file" 2> /dev/null
  # Run the test
  php --syntax-check "$_test_file"
}

function check_code_block_php_dependencies() {
  which php
}

# Functions to wrap output
function green() {
  local _message="$1"
  echo -e "\033[32m[ \e[1m$_message\e[21m ]\e[0m"
}

function red() {
  local _message="$1"
  echo -e "\033[31m[ \e[1m$_message\e[21m ]\e[0m"
}

function yellow() {
  local _message="$1"
  echo -e "\033[33m[ \e[1m$_message\e[21m ]\e[0m"
}

function explain() {
  local _file="$1"
  local _line_no="$2"
  local _message="$3"
  >&2 echo -e Warning:$_file:$_line_no:$_message
}

# Parse command-line optins...
function show_usage() {
  cat << EOF
usage: mdcheckr [ -h | --help ] [ -v | --version ] FILE ..
EOF
}


function show_help() {
  show_usage
  cat << EOF

A testing tool to detect quality problems with your Markdown documentation.

positional arguments:
  FILE ..              files to check

optional arguments:
  -h, --help           show this help message and exit
  -v, --version        show version number and exit
EOF
}

function show_version() {
  echo "mdcheckr ${VERSION}"
}

# Set defaults
VERSION="1.3"
OPTIND=1
VERBOSITY=3
while getopts "hv-:" opt; do
  case $opt in
    -)
      case "${OPTARG}" in
        help)
          show_help
          exit 0
          ;;
        version)
          show_version
          exit 0
          ;;
        *)
          echo "$0: Illegal option -- ${OPTARG}" >&2
          show_usage >&2
          exit 1
          ;;
      esac
      ;;
    h)
      show_help
      exit 0
      ;;
    v)
      show_version
      exit 0
      ;;
    *)
      show_usage >&2
      exit 1
    ;;
  esac
done
shift "$((OPTIND-1))"

# Require at least one filename to be specified
if [ "$#" -lt 1 ]; then
    echo "$0: Missing file operand" >&2
    show_usage >&2
fi


# Explicitly check for each dependency
for i in which pandoc xmllint curl; do which $i > /dev/null 2> /dev/null || (
    >&2 echo "The tool '$i' is required by mdcheckr, but is not in your \$PATH."
    exit 127
  );
done

VERBOSITY=3
FAILURE_COUNT=0
DIR=`pwd`
for i in $@; do
  cd -- "$DIR"
  fn=$(basename -- "$i")
  echo "Checking $i .."
  # Check that markdown code blocks have good syntax
  check_code_blocks "$i"
  # Jump into same dir as file (for checking relative paths to work)
  cd `dirname -- "$i"`
  # Check that file will render to contain valid links, images
  html_fn=$(render_markdown_to_html "$fn")
  check_links "$i" < <(extract_links_from_html "$html_fn")
  check_image_links "$i"  < <(extract_image_links_from_html "$html_fn")
  rm -f -- "$html_fn"
done

# Return to initial directory
cd $DIR

# Log number of FAILURE_COUNT
if [ "$FAILURE_COUNT" -gt 0 ]; then
  echo "Done, with $FAILURE_COUNT problems(s) found."
fi

# Use number of FAILURE_COUNT as exit code
exit $FAILURE_COUNT
